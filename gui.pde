/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void slider1_change1(GSlider source, GEvent event) { //_CODE_:slider1:338791:

  freq1 = source.getValueF()/50.; 
} //_CODE_:slider1:338791:

public void slider2_change1(GSlider source, GEvent event) { //_CODE_:slider2:878186:
  freq2 = source.getValueF()/50.;
} //_CODE_:slider2:878186:

public void slider3_change1(GSlider source, GEvent event) { //_CODE_:slider3:356847:
  phi2 = source.getValueF()*PI;
  oldFreq2 = 0; 
} //_CODE_:slider3:356847:

public void slider4_change1(GSlider source, GEvent event) { //_CODE_:slider4:466821:
  phi1 = source.getValueF()*PI;
  oldFreq1 = 0;
} //_CODE_:slider4:466821:

public void slider5_change1(GSlider source, GEvent event) { //_CODE_:slider5:394346:
  angSpeed1 = source.getValueF()/5.;
  
  println("slider5 - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:slider5:394346:

public void slider6_change1(GSlider source, GEvent event) { //_CODE_:slider5:394346:
  angSpeed2 = source.getValueF()/5.;
  
  println("slider5 - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:slider5:394346:


public void checkbox1_clicked1(GCheckbox source, GEvent event) { //_CODE_:checkbox1:780184:
  println("checkbox1 - GCheckbox >> GEvent." + event + " @ " + millis());
} //_CODE_:checkbox1:780184:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  if(frame != null)
    frame.setTitle("Sketch Window");
  slider1 = new GSlider(this, 10, 50, 200, 60, 10.0);
  slider1.setShowValue(true);
  slider1.setLimits(10, 0.0, 60);
  slider1.setNbrTicks(61);
  slider1.setStickToTicks(true);
  slider1.setShowTicks(false);
  slider1.setNumberFormat(G4P.DECIMAL, 0);
  slider1.setOpaque(false);
  slider1.addEventHandler(this, "slider1_change1");
  sin1_label = new GLabel(this, 10, 30, 120, 20);
  sin1_label.setText("frequency 1");
  sin1_label.setOpaque(false);
  slider2 = new GSlider(this, 10, 250, 200, 60, 10.0);
  slider2.setShowValue(true);
  slider2.setLimits(10, 0.0, 60);
  slider2.setNbrTicks(61);
  slider2.setStickToTicks(true);
  slider2.setShowTicks(false);
  slider2.setNumberFormat(G4P.DECIMAL, 0);
  slider2.setOpaque(false);
  slider2.addEventHandler(this, "slider2_change1");
  sin2_label = new GLabel(this, 10, 230, 120, 20);
  sin2_label.setText("frequency2");
  sin2_label.setOpaque(false);
  combined_label = new GLabel(this, 16, 420, 120, 20);
  combined_label.setText("combined wave");
  combined_label.setOpaque(false);
  slider3 = new GSlider(this, 230, 250, 200, 60, 10.0);
  slider3.setShowValue(true);
  slider3.setLimits(0.0, 0.0, 2.0);
  slider3.setNbrTicks(49);
  slider3.setStickToTicks(true);
  slider3.setShowTicks(false);
  slider3.setNumberFormat(G4P.DECIMAL, 2);
  slider3.setOpaque(false);
  slider3.addEventHandler(this, "slider3_change1");
  slider4 = new GSlider(this, 230, 50, 200, 60, 10.0);
  slider4.setShowValue(true);
  slider4.setLimits(0.0, 0.0, 2.0);
  slider4.setNbrTicks(51);
  slider4.setStickToTicks(true);
  slider4.setShowTicks(false);
  slider4.setNumberFormat(G4P.DECIMAL, 2);
  slider4.setOpaque(false);
  slider4.addEventHandler(this, "slider4_change1");
  phase1 = new GLabel(this, 230, 30, 120, 20);
  phase1.setText("phase (radians)");
  phase1.setOpaque(false);
  phase2 = new GLabel(this, 230, 230, 120, 20);
  phase2.setText("phase (radians)");
  phase2.setOpaque(false);
  slider5 = new GSlider(this, 450, 50, 200, 60, 10.0);
  slider5.setLimits(0.0, 0.0, 4.0);
  slider5.setNumberFormat(G4P.DECIMAL, 2);
  slider5.setOpaque(false);
  slider5.addEventHandler(this, "slider5_change1");

  slider6 = new GSlider(this, 450, 250, 200, 60, 10.0);
  slider6.setLimits(0.0, 0.0, 4.0);
  slider6.setNumberFormat(G4P.DECIMAL, 2);
  slider6.setOpaque(false);
  slider6.addEventHandler(this, "slider6_change1");

  speed1label = new GLabel(this, 450, 30, 80, 20);
  speed1label.setText("speed");
  speed1label.setOpaque(false);
  speed2label = new GLabel(this, 450, 230, 80, 20);
  speed2label.setText("speed");
  speed2label.setOpaque(false);
  togGroup1 = new GToggleGroup();
  togGroup2 = new GToggleGroup();
  //checkbox1 = new GCheckbox(this, 450, 270, 120, 20);
  //checkbox1.setTextAlign(GAlign.LEFT, GAlign.MIDDLE);
  //checkbox1.setText("Move wave?");
  //checkbox1.setOpaque(false);
  //checkbox1.addEventHandler(this, "checkbox1_clicked1");
  //checkbox1.setSelected(true);
}

// Variable declarations 
// autogenerated do not edit
GSlider slider1; 
GLabel sin1_label; 
GSlider slider2; 
GLabel sin2_label; 
GLabel combined_label; 
GSlider slider3; 
GSlider slider4; 
GLabel phase1; 
GLabel phase2; 
GSlider slider5; 
GSlider slider6; 
GLabel speed1label; 
GLabel speed2label; 
GToggleGroup togGroup1; 
GToggleGroup togGroup2; 
//GCheckbox checkbox1; 